<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If selected, move with mouse
if (global.selected == self){
    x = mouse_x;
    y = mouse_y;
    scr_draw_grid();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check grid and then drop

// Calculate the edges of the grid (-1 to ensure on grid)
var max_x = (global.grid_cell_size * global.grid_x_size) - 1;
var max_y = (global.grid_cell_size * global.grid_y_size) - 1;

// If the mouse moves beyond the grid, drop
if (mouse_x &gt; max_x or mouse_y &gt; max_y){
    global.selected = noone;
    x = self.return_x;
    y = self.return_y;
    return false;
}

// Calculate which grid cell the mouse is hovering over
var grid_x = floor( max(0, min(max_x, mouse_x) ) / global.grid_cell_size);
var grid_y = floor( max(0, min(max_y, mouse_y) ) / global.grid_cell_size);

// If this grid square is buildable
if (global.grid_array[grid_x, grid_y] == GRID_PLAYER_BUILD){

    if (obj_player_info.ap &gt;= self.ap_cost){
        //Can afford to build
        obj_player_info.ap -= self.ap_cost;
    }else{
        //Cannot afford to build
        return false;
    }
    
    var ob = obj_spear;
    if (self.builder == UNIT_SPEAR){
        ob = obj_spear;
    }else if(self.builder == UNIT_ARROW){
        ob = obj_arrow;
    }
    
    scr_add_to_grid(grid_x, grid_y, ob);
    //draw_text(mouse_x,mouse_y,"OK!");
}else{
    //draw_text(mouse_x,mouse_y,"Occupied!");
}

global.selected = noone;
x = self.return_x;
y = self.return_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set selected to self
if (global.current_turn == TURN_PLAYER_DEPLOY){
    global.selected = self;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
